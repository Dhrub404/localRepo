
1
#include <stdio.h>

int a[10][10], n;

void bfs(int src) {
    int q[10], f = 0, r = -1, vis[10], i, j;

    for (j = 1; j <= n; j++) {
        vis[j] = 0;
    }

    vis[src] = 1;
    q[++r] = src;

    while (f <= r) {
        i = q[f++];
        for (j = 1; j <= n; j++) {
            if (a[i][j] == 1 && vis[j] != 1) {
                vis[j] = 1;
                q[++r] = j;
            }
        }
    }

    for (j = 1; j <= n; j++) {
        if (vis[j] != 1)
            printf("Node %d is not reachable\n", j);
        else
            printf("Node %d is reachable\n", j);
    }
}

int main() {
    int i, j, src;
    printf("Enter the number of nodes: ");
    scanf("%d", &n);

    printf("Enter the adjacency matrix:\n");
    for (i = 1; i <= n; i++)
        for (j = 1; j <= n; j++)
            scanf("%d", &a[i][j]);

    printf("Enter the source node: ");
    scanf("%d", &src);

    bfs(src);
    return 0;
}




2
#include <stdio.h>

#define MAX 10

void fnTopological(int a[MAX][MAX], int n) {
    int in[MAX], out[MAX], stack[MAX], top = -1;
    int i, j, k = 0;

    for (i = 0; i < n; i++) {
        in[i] = 0;
        for (j = 0; j < n; j++) {
            if (a[j][i] == 1)
                in[i]++;
        }
    }

    while (1) {
        for (i = 0; i < n; i++) {
            if (in[i] == 0) {
                stack[++top] = i;
                in[i] = -1;
            }
        }

        if (top == -1)
            break;

        out[k] = stack[top--];

        for (i = 0; i < n; i++) {
            if (a[out[k]][i] == 1)
                in[i]--;
        }

        k++;
    }

    printf("Topological Sorting is:\n");
    for (i = 0; i < k; i++)
        printf("%d ", out[i] + 1);
    printf("\n");
}

int main() {
    int a[MAX][MAX], n, i, j;
    printf("Enter the number of vertices: ");
    scanf("%d", &n);

    printf("Enter the adjacency matrix:\n");
    for (i = 0; i < n; i++)
        for (j = 0; j < n; j++)
            scanf("%d", &a[i][j]);

    fnTopological(a, n);
    return 0;
}




3
#include <stdio.h>

void combine(int a[], int low, int mid, int high) {
    int c[20], i, j, k;
    i = k = low;
    j = mid + 1;

    while (i <= mid && j <= high) {
        if (a[i] < a[j])
            c[k++] = a[i++];
        else
            c[k++] = a[j++];
    }

    while (i <= mid)
        c[k++] = a[i++];

    while (j <= high)
        c[k++] = a[j++];

    for (i = low; i <= high; i++)
        a[i] = c[i];
}

void split(int a[], int low, int high) {
    int mid;
    if (low < high) {
        mid = (low + high) / 2;
        split(a, low, mid);
        split(a, mid + 1, high);
        combine(a, low, mid, high);
    }
}

int main() {
    int a[20], n, i;
    printf("Enter the number of elements: ");
    scanf("%d", &n);

    printf("Enter the elements:\n");
    for (i = 0; i < n; i++)
        scanf("%d", &a[i]);

    split(a, 0, n - 1);

    printf("Sorted array:\n");
    for (i = 0; i < n; i++)
        printf("%d ", a[i]);
    printf("\n");
    return 0;
}




4
#include <stdio.h>

int partition(int a[], int low, int high) {
    int i = low + 1, j = high, key = a[low], temp;
    while (1) {
        while (i <= high && a[i] < key)
            i++;
        while (j >= low && a[j] > key)
            j--;
        if (i < j) {
            temp = a[i];
            a[i] = a[j];
            a[j] = temp;
        } else {
            temp = a[low];
            a[low] = a[j];
            a[j] = temp;
            return j;
        }
    }
}

void quick_sort(int a[], int low, int high) {
    int j;
    if (low < high) {
        j = partition(a, low, high);
        quick_sort(a, low, j - 1);
        quick_sort(a, j + 1, high);
    }
}

int main() {
    int a[20], n, i;
    printf("Enter the number of elements: ");
    scanf("%d", &n);
    printf("Enter the elements:\n");
    for (i = 0; i < n; i++)
        scanf("%d", &a[i]);

    quick_sort(a, 0, n - 1);

    printf("Sorted array:\n");
    for (i = 0; i < n; i++)
        printf("%d ", a[i]);
    printf("\n");
    return 0;
}




5
#include <stdio.h>
#include <string.h>

int horspool(char text[], char pattern[]) {
    int shift[300], i, j, m, n;
    n = strlen(text);
    m = strlen(pattern);

    for (i = 0; i < 300; i++)
        shift[i] = m;
    for (j = 0; j < m - 1; j++)
        shift[pattern[j]] = m - 1 - j;

    i = m - 1;
    while (i < n) {
        j = 0;
        while (j < m && pattern[m - 1 - j] == text[i - j])
            j++;
        if (j == m)
            return 1;
        i += shift[text[i]];
    }
    return 0;
}

int main() {
    char text[300], pattern[20];
    printf("Enter the text:\n");
    scanf("%s", text);
    printf("Enter the pattern:\n");
    scanf("%s", pattern);

    if (horspool(text, pattern))
        printf("Pattern found\n");
    else
        printf("Pattern not found\n");

    return 0;
}




6
#include <stdio.h>
#include <conio.h>

void build_heap(int[], int);
void heapify(int[], int, int);
void heap_sort(int[], int);

void main() {
    int a[10], i, n;
    clrscr();

    printf("\n enter the no. of elements:\t");
    scanf("%d", &n);
    printf("\n enter the elements:\n");
    for (i = 0; i <= n - 1; i++) {
        scanf("%d", &a[i]);
    }

    build_heap(a, n);
    heap_sort(a, n);

    printf("\n the sorted array is:\n");
    for (i = 0; i <= n - 1; i++) {
        printf("%d\t", a[i]);
    }

    getch();
}

void build_heap(int a[], int n) {
    int p;
    for (p = (n - 1) / 2; p >= 0; p--) {
        heapify(a, n, p);
    }
}

void heapify(int a[], int n, int p) {
    int item, c;
    item = a[p];
    c = 2 * p + 1;

    while (c <= n - 1) {
        if (c + 1 <= n - 1) {
            if (a[c] < a[c + 1]) {
                c = c + 1;
            }
        }

        if (item < a[c]) {
            a[p] = a[c];
            p = c;
            c = 2 * p + 1;
        } else {
            break;
        }
    }
    a[p] = item;
}

void heap_sort(int a[], int n) {
    int i, temp;
    for (i = n - 1; i > 0; i--) {
        temp = a[0];
        a[0] = a[i];
        a[i] = temp;
        build_heap(a, i);
    }
}



7
#include <stdio.h>
#include <conio.h>

void knapsack();
int max(int, int);
int i, j, n, m, p[10], w[10], v[10][10];

void main() {
    clrscr();

    printf("\n enter the no. of items:\t");
    scanf("%d", &n);

    printf("\n enter the weight of each item:\n");
    for (i = 1; i <= n; i++) {
        scanf("%d", &w[i]);
    }

    printf("\n enter the profit of each item:\n");
    for (i = 1; i <= n; i++) {
        scanf("%d", &p[i]);
    }

    printf("\n enter the knapsack's capacity:\t");
    scanf("%d", &m);

    knapsack();
    getch();
}

void knapsack() {
    int x[10];
    for (i = 0; i <= n; i++) {
        for (j = 0; j <= m; j++) {
            if (i == 0 || j == 0) {
                v[i][j] = 0;
            } else if (j - w[i] < 0) {
                v[i][j] = v[i - 1][j];
            } else {
                v[i][j] = max(v[i - 1][j], v[i - 1][j - w[i]] + p[i]);
            }
        }
    }

    printf("\n the output is:\n");
    for (i = 0; i <= n; i++) {
        for (j = 0; j <= m; j++) {
            printf("%d\t", v[i][j]);
        }
        printf("\n");
    }

    printf("\n the optimal solution is %d", v[n][m]);
    printf("\n the solution vector is:\n");

    for (i = n; i >= 1; i--) {
        if (v[i][m] != v[i - 1][m]) {
            x[i] = 1;
            m = m - w[i];
        } else {
            x[i] = 0;
        }
    }

    for (i = 1; i <= n; i++) {
        printf("%d\t", x[i]);
    }
}

int max(int x, int y) {
    if (x > y)
        return x;
    else
        return y;
}




8
#include <stdio.h>
#include <conio.h>

void dijkstras();
int c[10][10], n, src;

void main() {
    int i, j;
    clrscr();
    printf("\n enter the no. of vertices:\t");
    scanf("%d", &n);

    printf("\n enter the cost matrix:\n");
    for (i = 1; i <= n; i++) {
        for (j = 1; j <= n; j++) {
            scanf("%d", &c[i][j]);
        }
    }

    printf("\n enter the source node:\t");
    scanf("%d", &src);

    dijkstras();
    getch();
}

void dijkstras() {
    int vis[10], dist[10], u, j, count, min, i;

    for (j = 1; j <= n; j++) {
        dist[j] = c[src][j];
    }

    for (j = 1; j <= n; j++) {
        vis[j] = 0;
    }

    dist[src] = 0;
    vis[src] = 1;
    count = 1;

    while (count != n) {
        min = 9999;

        for (j = 1; j <= n; j++) {
            if (dist[j] < min && vis[j] != 1) {
                min = dist[j];
                u = j;
            }
        }

        vis[u] = 1;
        count++;

        for (j = 1; j <= n; j++) {
            if (min + c[u][j] < dist[j] && vis[j] != 1) {
                dist[j] = min + c[u][j];
            }
        }
    }

    printf("\n the shortest distance is:\n");
    for (j = 1; j <= n; j++) {
        printf("\n%d -----> %d = %d", src, j, dist[j]);
    }
}



9
#include<stdio.h>
#include<conio.h>

void kruskals();
int c[10][10], n;

void main() {
    int i, j;
    clrscr();

    printf("\nEnter the number of vertices:\t");
    scanf("%d", &n);

    printf("\nEnter the cost matrix:\n");
    for(i = 1; i <= n; i++) {
        for(j = 1; j <= n; j++) {
            scanf("%d", &c[i][j]);
        }
    }

    kruskals();
    getch();
}

void kruskals() {
    int i, j, u, v, a, b, min;
    int ne = 0, mincost = 0;
    int parent[10];

    for(i = 1; i <= n; i++) {
        parent[i] = 0;
    }

    while(ne != n - 1) {
        min = 9999;
        for(i = 1; i <= n; i++) {
            for(j = 1; j <= n; j++) {
                if(c[i][j] < min) {
                    min = c[i][j];
                    u = a = i;
                    v = b = j;
                }
            }
        }

        while(parent[u] != 0) u = parent[u];
        while(parent[v] != 0) v = parent[v];

        if(u != v) {
            printf("\n%d -----> %d = %d", a, b, min);
            parent[v] = u;
            ne++;
            mincost += min;
        }

        c[a][b] = c[b][a] = 9999;
    }

    printf("\nMinimum Cost = %d\n", mincost);
}




10
#include<stdio.h>
#include<conio.h>

void subset(int, int, int);
int count = 0, d, s[10], x[10];

void main() {
    int sum = 0, n, i;
    clrscr();

    printf("\nEnter number of elements:\t");
    scanf("%d", &n);

    printf("\nEnter elements in ascending order:\n");
    for(i = 0; i < n; i++) {
        scanf("%d", &s[i]);
        sum += s[i];
    }

    printf("\nEnter required sum:\t");
    scanf("%d", &d);

    if(sum < d || s[0] > d) {
        printf("No solution exists\n");
    } else {
        subset(0, 0, sum);
    }

    getch();
}

void subset(int m, int k, int sum) {
    int i;
    x[k] = 1;

    if(m + s[k] == d) {
        printf("\nSubset solution %d:\n", ++count);
        for(i = 0; i <= k; i++) {
            if(x[i] == 1) printf("%d\t", s[i]);
        }
    } else if(m + s[k] + s[k+1] <= d) {
        subset(m + s[k], k + 1, sum - s[k]);
    }

    if((m + sum - s[k] >= d) && (m + s[k+1] <= d)) {
        x[k] = 0;
        subset(m, k + 1, sum - s[k]);
    }
}
