1
#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<sys/wait.h>

void main()
{
    int pid;
    pid = fork();

    if(pid < 0)
    {
        printf("fork failed");
        exit(1);
    }
    else if(pid == 0)
    {
        execlp("whoami", "whoami", NULL);
        exit(0);
    }
    else
    {
        printf("\nProcess id is: %d\n", getpid());
        wait(NULL);
        exit(0);
    }
}




2
#include <stdio.h>
#include <windows.h>

int main()
{
    STARTUPINFO si;
    PROCESS_INFORMATION pi;

    ZeroMemory(&si, sizeof(si));
    si.cb = sizeof(si);
    ZeroMemory(&pi, sizeof(pi));

    if(!CreateProcess("C:\\Windows\\System32\\cmd.exe", NULL, NULL, NULL, FALSE, 0, NULL, NULL, &si, &pi))
    {
        printf("Sorry! CreateProcess() failed\n");
        return -1;
    }
    else
    {
        printf("Well CreateProcess() looks OK\n");
        printf("exit after 5000ms\n");
    }

    WaitForSingleObject(pi.hProcess, 5000);
    CloseHandle(pi.hProcess);
    CloseHandle(pi.hThread);
    return 0;
}




3
#include<stdio.h>
#include<string.h>

struct fileTable
{
    char name[20];
    int sb, nob;
} ft[30];

void main()
{
    int i, j, n;
    char s[20];

    printf("Enter no of files: ");
    scanf("%d", &n);

    for(i=0; i<n; i++)
    {
        printf("\nEnter file name %d: ", i+1);
        scanf("%s", ft[i].name);
        printf("Enter starting block of file %d: ", i+1);
        scanf("%d", &ft[i].sb);
        printf("Enter no of blocks in file %d: ", i+1);
        scanf("%d", &ft[i].nob);
    }

    printf("\nEnter the file name to be searched: ");
    scanf("%s", s);

    for(i=0; i<n; i++)
        if(strcmp(s, ft[i].name) == 0)
            break;

    if(i == n)
        printf("\nFile Not Found");
    else
    {
        printf("\nFILE NAME\tSTART BLOCK\tNO OF BLOCKS\tBLOCKS OCCUPIED\n");
        printf("%s\t\t%d\t\t%d\t\t", ft[i].name, ft[i].sb, ft[i].nob);
        for(j=0; j<ft[i].nob; j++)
            printf("%d ", ft[i].sb + j);
    }
}




4
#include<stdio.h>
#include<string.h>
#include<stdlib.h>

struct
{
    char dname[10], fname[10][10];
    int fcnt;
} dir;

void main()
{
    int i, ch;
    char f[30];
    dir.fcnt = 0;

    printf("\nEnter name of directory: ");
    scanf("%s", dir.dname);

    while(1)
    {
        printf("\n\n1. Create File\t2. Delete File\t3. Search File\n4. Display Files\t5. Exit\nEnter your choice: ");
        scanf("%d", &ch);

        switch(ch)
        {
            case 1:
                printf("Enter the name of the file: ");
                scanf("%s", dir.fname[dir.fcnt]);
                dir.fcnt++;
                break;

            case 2:
                printf("Enter the name of the file: ");
                scanf("%s", f);
                for(i = 0; i < dir.fcnt; i++)
                {
                    if(strcmp(f, dir.fname[i]) == 0)
                    {
                        printf("File %s is deleted", f);
                        strcpy(dir.fname[i], dir.fname[dir.fcnt-1]);
                        dir.fcnt--;
                        break;
                    }
                }
                if(i == dir.fcnt)
                    printf("File %s not found", f);
                break;

            case 3:
                printf("Enter the name of the file: ");
                scanf("%s", f);
                for(i = 0; i < dir.fcnt; i++)
                {
                    if(strcmp(f, dir.fname[i]) == 0)
                    {
                        printf("File %s is found", f);
                        break;
                    }
                }
                if(i == dir.fcnt)
                    printf("File %s not found", f);
                break;

            case 4:
                if(dir.fcnt == 0)
                    printf("Directory Empty");
                else
                {
                    printf("The Files are: ");
                    for(i = 0; i < dir.fcnt; i++)
                        printf("\t%s", dir.fname[i]);
                }
                break;

            default:
                exit(0);
        }
    }
}




5
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

int tph, philname[20], status[20], howhung, hu[20], cho;

void one();
void two();

void main()
{
    int i;

    printf("DINING PHILOSOPHER PROBLEM\n");
    printf("Enter the total no. of philosophers: ");
    scanf("%d", &tph);

    for(i = 0; i < tph; i++)
    {
        philname[i] = i + 1;
        status[i] = 1;
    }

    printf("How many are hungry: ");
    scanf("%d", &howhung);

    if(howhung == tph)
    {
        printf("All are hungry..\nDeadlock stage will occur\nExiting\n");
        exit(0);
    }
    else
    {
        for(i = 0; i < howhung; i++)
        {
            printf("Enter philosopher %d position: ", i + 1);
            scanf("%d", &hu[i]);
            status[hu[i]] = 2;
        }

        do
        {
            printf("\n1. One can eat at a time\n2. Two can eat at a time\n3. Exit\nEnter your choice: ");
            scanf("%d", &cho);
            switch(cho)
            {
                case 1: one(); break;
                case 2: two(); break;
                case 3: exit(0);
                default: printf("Invalid option..\n");
            }
        } while(1);
    }
}

void one()
{
    int pos = 0, x, i;
    printf("Allow one philosopher to eat at any time\n");
    for(i = 0; i < howhung; i++, pos++)
    {
        printf("P %d is granted to eat\n", philname[hu[pos]]);
        for(x = pos + 1; x < howhung; x++)
            printf("P %d is waiting\n", philname[hu[x]]);
    }
}

void two()
{
    int i, j, s = 0, t, r, x;

    printf("Allow two philosophers to eat at same time\n");
    for(i = 0; i < howhung; i++)
    {
        for(j = i + 1; j < howhung; j++)
        {
            if(abs(hu[i] - hu[j]) >= 1 && abs(hu[i] - hu[j]) != 4)
            {
                printf("\nCombination %d\n", (s + 1));
                t = hu[i];
                r = hu[j];
                s++;
                printf("P %d and P %d are granted to eat\n", philname[t], philname[r]);
                for(x = 0; x < howhung; x++)
                {
                    if((hu[x] != t) && (hu[x] != r))
                        printf("P %d is waiting\n", philname[hu[x]]);
                }
            }
        }
    }
}



6
#include<stdio.h>

struct process
{
    int pid, bt, wt, tt;
} p[10], temp;

int main()
{
    int i, j, n, totwt = 0, tottt = 0;
    float avg1, avg2;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    for(i = 1; i <= n; i++)
    {
        p[i].pid = i;
        printf("Enter burst time for P%d: ", i);
        scanf("%d", &p[i].bt);
    }

    // sort by burst time
    for(i = 1; i < n; i++)
    {
        for(j = i + 1; j <= n; j++)
        {
            if(p[i].bt > p[j].bt)
            {
                temp = p[i];
                p[i] = p[j];
                p[j] = temp;
            }
        }
    }

    p[1].wt = 0;
    p[1].tt = p[1].bt;

    for(i = 2; i <= n; i++)
    {
        p[i].wt = p[i-1].bt + p[i-1].wt;
        p[i].tt = p[i].bt + p[i].wt;
    }

    printf("\nProcess\tBT\tWT\tTT\n");
    for(i = 1; i <= n; i++)
    {
        printf("P%d\t%d\t%d\t%d\n", p[i].pid, p[i].bt, p[i].wt, p[i].tt);
        totwt += p[i].wt;
        tottt += p[i].tt;
    }

    avg1 = (float)totwt / n;
    avg2 = (float)tottt / n;
    printf("\nAverage Waiting Time: %f", avg1);
    printf("\nAverage Turnaround Time: %f\n", avg2);

    return 0;
}




7
#include<stdio.h>

void main()
{
    int alloc[10][10], max[10][10], avail[10], work[10], total[10];
    int i, j, k, n, m, need[10][10], count = 0, c = 0;
    char finish[10];

    printf("Enter number of processes and resources: ");
    scanf("%d%d", &n, &m);

    for(i = 0; i < n; i++)
        finish[i] = 'n';

    printf("Enter Max matrix:\n");
    for(i = 0; i < n; i++)
        for(j = 0; j < m; j++)
            scanf("%d", &max[i][j]);

    printf("Enter Allocation matrix:\n");
    for(i = 0; i < n; i++)
        for(j = 0; j < m; j++)
            scanf("%d", &alloc[i][j]);

    printf("Enter total resources: ");
    for(i = 0; i < m; i++)
        scanf("%d", &total[i]);

    for(i = 0; i < m; i++)
        avail[i] = 0;

    for(i = 0; i < n; i++)
        for(j = 0; j < m; j++)
            avail[j] += alloc[i][j];

    for(i = 0; i < m; i++)
        work[i] = total[i] - avail[i];

    for(i = 0; i < n; i++)
        for(j = 0; j < m; j++)
            need[i][j] = max[i][j] - alloc[i][j];

A:
    for(i = 0; i < n; i++)
    {
        c = 0;
        for(j = 0; j < m; j++)
            if(need[i][j] <= work[j] && finish[i] == 'n')
                c++;

        if(c == m)
        {
            printf("All resources can be allocated to Process %d\n", i + 1);
            for(k = 0; k < m; k++)
            {
                work[k] += alloc[i][k];
                printf("%4d", work[k]);
            }
            printf("\n");
            finish[i] = 'y';
            count++;
        }
    }

    if(count != n)
        goto A;
    else
        printf("System is in safe state\n");
}




8
#include<stdio.h>

int main()
{
    int ms, bs, nob, ef, n, mp[10], tif = 0, i, p = 0;

    printf("Enter total memory available (in Bytes): ");
    scanf("%d", &ms);

    printf("Enter block size (in Bytes): ");
    scanf("%d", &bs);

    nob = ms / bs;
    ef = ms - nob * bs;

    printf("Enter number of processes: ");
    scanf("%d", &n);

    for(i = 0; i < n; i++)
    {
        printf("Enter memory required for process %d (in Bytes): ", i + 1);
        scanf("%d", &mp[i]);
    }

    printf("\nNo. of Blocks available in memory: %d", nob);
    printf("\nPROCESS\tMEMORY REQUIRED\tALLOCATED\tINTERNAL FRAGMENTATION");

    for(i = 0; i < n && p < nob; i++)
    {
        printf("\n%d\t\t%d", i + 1, mp[i]);
        if(mp[i] > bs)
            printf("\t\tNO\t\t---");
        else
        {
            printf("\t\tYES\t\t%d", bs - mp[i]);
            tif += bs - mp[i];
            p++;
        }
    }

    if(i < n)
        printf("\nMemory is Full, Remaining Processes cannot be accommodated");

    printf("\nTotal Internal Fragmentation: %d", tif);
    printf("\nTotal External Fragmentation: %d\n", ef);

    return 0;
}




9
#include<stdio.h>

int fr[3];

void display()
{
    for(int i = 0; i < 3; i++)
        printf("%d\t", fr[i]);
    printf("\n");
}

int main()
{
    int i, j, page[12] = {2,3,2,1,5,2,4,5,3,2,5,2};
    int flag1 = 0, flag2 = 0, pf = 0, frsize = 3, top = 0;

    for(i = 0; i < frsize; i++)
        fr[i] = -1;

    for(j = 0; j < 12; j++)
    {
        flag1 = flag2 = 0;

        for(i = 0; i < frsize; i++)
        {
            if(fr[i] == page[j])
            {
                flag1 = flag2 = 1;
                break;
            }
        }

        if(flag1 == 0)
        {
            for(i = 0; i < frsize; i++)
            {
                if(fr[i] == -1)
                {
                    fr[i] = page[j];
                    flag2 = 1;
                    break;
                }
            }
        }

        if(flag2 == 0)
        {
            fr[top] = page[j];
            top = (top + 1) % frsize;
            pf++;
        }

        display();
    }

    printf("Number of page faults: %d\n", pf + frsize);
    return 0;
}




10
#include<stdio.h>
#include<math.h>

int main()
{
    int t[20], tohm[20], n, i, tot = 0;
    float avhm;

    printf("Enter the number of tracks: ");
    scanf("%d", &n);

    printf("Enter the track positions: ");
    for(i = 0; i < n; i++)
        scanf("%d", &t[i]);

    for(i = 0; i < n - 1; i++)
    {
        tohm[i] = abs(t[i+1] - t[i]);
        tot += tohm[i];
    }

    avhm = (float)tot / (n - 1);

    printf("Tracks traversed\tDifference\n");
    for(i = 0; i < n - 1; i++)
        printf("%d -> %d\t\t%d\n", t[i], t[i+1], tohm[i]);

    printf("\nAverage header movement: %.2f\n", avhm);

    return 0;
}
