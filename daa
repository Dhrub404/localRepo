#include <stdio.h>
#include <conio.h>

void build_heap(int[], int);
void heapify(int[], int, int);
void heap_sort(int[], int);

void main() {
    int a[10], i, n;
    clrscr();

    printf("\n enter the no. of elements:\t");
    scanf("%d", &n);
    printf("\n enter the elements:\n");
    for (i = 0; i <= n - 1; i++) {
        scanf("%d", &a[i]);
    }

    build_heap(a, n);
    heap_sort(a, n);

    printf("\n the sorted array is:\n");
    for (i = 0; i <= n - 1; i++) {
        printf("%d\t", a[i]);
    }

    getch();
}

void build_heap(int a[], int n) {
    int p;
    for (p = (n - 1) / 2; p >= 0; p--) {
        heapify(a, n, p);
    }
}

void heapify(int a[], int n, int p) {
    int item, c;
    item = a[p];
    c = 2 * p + 1;

    while (c <= n - 1) {
        if (c + 1 <= n - 1) {
            if (a[c] < a[c + 1]) {
                c = c + 1;
            }
        }

        if (item < a[c]) {
            a[p] = a[c];
            p = c;
            c = 2 * p + 1;
        } else {
            break;
        }
    }
    a[p] = item;
}

void heap_sort(int a[], int n) {
    int i, temp;
    for (i = n - 1; i > 0; i--) {
        temp = a[0];
        a[0] = a[i];
        a[i] = temp;
        build_heap(a, i);
    }
}






#include <stdio.h>
#include <conio.h>

void knapsack();
int max(int, int);
int i, j, n, m, p[10], w[10], v[10][10];

void main() {
    clrscr();

    printf("\n enter the no. of items:\t");
    scanf("%d", &n);

    printf("\n enter the weight of each item:\n");
    for (i = 1; i <= n; i++) {
        scanf("%d", &w[i]);
    }

    printf("\n enter the profit of each item:\n");
    for (i = 1; i <= n; i++) {
        scanf("%d", &p[i]);
    }

    printf("\n enter the knapsack's capacity:\t");
    scanf("%d", &m);

    knapsack();
    getch();
}

void knapsack() {
    int x[10];
    for (i = 0; i <= n; i++) {
        for (j = 0; j <= m; j++) {
            if (i == 0 || j == 0) {
                v[i][j] = 0;
            } else if (j - w[i] < 0) {
                v[i][j] = v[i - 1][j];
            } else {
                v[i][j] = max(v[i - 1][j], v[i - 1][j - w[i]] + p[i]);
            }
        }
    }

    printf("\n the output is:\n");
    for (i = 0; i <= n; i++) {
        for (j = 0; j <= m; j++) {
            printf("%d\t", v[i][j]);
        }
        printf("\n");
    }

    printf("\n the optimal solution is %d", v[n][m]);
    printf("\n the solution vector is:\n");

    for (i = n; i >= 1; i--) {
        if (v[i][m] != v[i - 1][m]) {
            x[i] = 1;
            m = m - w[i];
        } else {
            x[i] = 0;
        }
    }

    for (i = 1; i <= n; i++) {
        printf("%d\t", x[i]);
    }
}

int max(int x, int y) {
    if (x > y)
        return x;
    else
        return y;
}