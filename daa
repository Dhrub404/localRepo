6
#include <stdio.h>
#include <conio.h>

void build_heap(int[], int);
void heapify(int[], int, int);
void heap_sort(int[], int);

void main() {
    int a[10], i, n;
    clrscr();

    printf("\n enter the no. of elements:\t");
    scanf("%d", &n);
    printf("\n enter the elements:\n");
    for (i = 0; i <= n - 1; i++) {
        scanf("%d", &a[i]);
    }

    build_heap(a, n);
    heap_sort(a, n);

    printf("\n the sorted array is:\n");
    for (i = 0; i <= n - 1; i++) {
        printf("%d\t", a[i]);
    }

    getch();
}

void build_heap(int a[], int n) {
    int p;
    for (p = (n - 1) / 2; p >= 0; p--) {
        heapify(a, n, p);
    }
}

void heapify(int a[], int n, int p) {
    int item, c;
    item = a[p];
    c = 2 * p + 1;

    while (c <= n - 1) {
        if (c + 1 <= n - 1) {
            if (a[c] < a[c + 1]) {
                c = c + 1;
            }
        }

        if (item < a[c]) {
            a[p] = a[c];
            p = c;
            c = 2 * p + 1;
        } else {
            break;
        }
    }
    a[p] = item;
}

void heap_sort(int a[], int n) {
    int i, temp;
    for (i = n - 1; i > 0; i--) {
        temp = a[0];
        a[0] = a[i];
        a[i] = temp;
        build_heap(a, i);
    }
}

TC 
#include<stdio.h>
#include<conio.h>
#include<time.h>

void build_heap(int[], int);
void heapify(int[], int, int);
void heap_sort(int[], int);

void main() {
    int a[16000], i;
    long int n = 500;
    clock_t start, end;
    clrscr();

    while(n <= 16000) {
        for(i = 0; i < n; i++) {
            a[i] = rand();
        }

        start = clock();
        build_heap(a, n);
        heap_sort(a, n);
        end = clock();

        printf("\nTime taken for n = %lu is %f", n, (end - start)/(double)CLK_TCK);
        n += 1000;
    }

    getch();
}






7
#include <stdio.h>
#include <conio.h>

void knapsack();
int max(int, int);
int i, j, n, m, p[10], w[10], v[10][10];

void main() {
    clrscr();

    printf("\n enter the no. of items:\t");
    scanf("%d", &n);

    printf("\n enter the weight of each item:\n");
    for (i = 1; i <= n; i++) {
        scanf("%d", &w[i]);
    }

    printf("\n enter the profit of each item:\n");
    for (i = 1; i <= n; i++) {
        scanf("%d", &p[i]);
    }

    printf("\n enter the knapsack's capacity:\t");
    scanf("%d", &m);

    knapsack();
    getch();
}

void knapsack() {
    int x[10];
    for (i = 0; i <= n; i++) {
        for (j = 0; j <= m; j++) {
            if (i == 0 || j == 0) {
                v[i][j] = 0;
            } else if (j - w[i] < 0) {
                v[i][j] = v[i - 1][j];
            } else {
                v[i][j] = max(v[i - 1][j], v[i - 1][j - w[i]] + p[i]);
            }
        }
    }

    printf("\n the output is:\n");
    for (i = 0; i <= n; i++) {
        for (j = 0; j <= m; j++) {
            printf("%d\t", v[i][j]);
        }
        printf("\n");
    }

    printf("\n the optimal solution is %d", v[n][m]);
    printf("\n the solution vector is:\n");

    for (i = n; i >= 1; i--) {
        if (v[i][m] != v[i - 1][m]) {
            x[i] = 1;
            m = m - w[i];
        } else {
            x[i] = 0;
        }
    }

    for (i = 1; i <= n; i++) {
        printf("%d\t", x[i]);
    }
}

int max(int x, int y) {
    if (x > y)
        return x;
    else
        return y;
}

TC
// Add clock( ) to measure time:
#include<stdio.h>
#include<conio.h>
#include<time.h>

void knapsack();
int max(int, int);
int i, j, n, m, p[10], w[10], v[10][10];

void main() {
    clock_t start, end;
    clrscr();
    printf("\nEnter number of items:\t"); scanf("%d", &n);

    printf("\nEnter weights:\n");
    for(i = 1; i <= n; i++) scanf("%d", &w[i]);

    printf("\nEnter profits:\n");
    for(i = 1; i <= n; i++) scanf("%d", &p[i]);

    printf("\nEnter knapsack capacity:\t"); scanf("%d", &m);

    start = clock();
    knapsack();
    end = clock();

    printf("\nTime taken: %f seconds\n", (end - start)/(double)CLK_TCK);
    getch();
}







8
#include <stdio.h>
#include <conio.h>

void dijkstras();
int c[10][10], n, src;

void main() {
    int i, j;
    clrscr();
    printf("\n enter the no. of vertices:\t");
    scanf("%d", &n);

    printf("\n enter the cost matrix:\n");
    for (i = 1; i <= n; i++) {
        for (j = 1; j <= n; j++) {
            scanf("%d", &c[i][j]);
        }
    }

    printf("\n enter the source node:\t");
    scanf("%d", &src);

    dijkstras();
    getch();
}

void dijkstras() {
    int vis[10], dist[10], u, j, count, min, i;

    for (j = 1; j <= n; j++) {
        dist[j] = c[src][j];
    }

    for (j = 1; j <= n; j++) {
        vis[j] = 0;
    }

    dist[src] = 0;
    vis[src] = 1;
    count = 1;

    while (count != n) {
        min = 9999;

        for (j = 1; j <= n; j++) {
            if (dist[j] < min && vis[j] != 1) {
                min = dist[j];
                u = j;
            }
        }

        vis[u] = 1;
        count++;

        for (j = 1; j <= n; j++) {
            if (min + c[u][j] < dist[j] && vis[j] != 1) {
                dist[j] = min + c[u][j];
            }
        }
    }

    printf("\n the shortest distance is:\n");
    for (j = 1; j <= n; j++) {
        printf("\n%d -----> %d = %d", src, j, dist[j]);
    }
}

TC 
#include<stdio.h>
#include<conio.h>
#include<time.h>

void dijkstras();
int c[10][10], n, src;

void main() {
    int i, j;
    clock_t start, end;

    clrscr();
    printf("\nEnter number of vertices:\t");
    scanf("%d", &n);

    printf("\nEnter the cost matrix:\n");
    for(i = 1; i <= n; i++) {
        for(j = 1; j <= n; j++) {
            scanf("%d", &c[i][j]);
        }
    }

    printf("\nEnter the source node:\t");
    scanf("%d", &src);

    start = clock();
    dijkstras();
    end = clock();

    printf("\nTime taken: %f seconds\n", (end - start) / (double)CLK_TCK);
    getch();
}





9
#include<stdio.h>
#include<conio.h>

void kruskals();
int c[10][10], n;

void main() {
    int i, j;
    clrscr();

    printf("\nEnter the number of vertices:\t");
    scanf("%d", &n);

    printf("\nEnter the cost matrix:\n");
    for(i = 1; i <= n; i++) {
        for(j = 1; j <= n; j++) {
            scanf("%d", &c[i][j]);
        }
    }

    kruskals();
    getch();
}

void kruskals() {
    int i, j, u, v, a, b, min;
    int ne = 0, mincost = 0;
    int parent[10];

    for(i = 1; i <= n; i++) {
        parent[i] = 0;
    }

    while(ne != n - 1) {
        min = 9999;
        for(i = 1; i <= n; i++) {
            for(j = 1; j <= n; j++) {
                if(c[i][j] < min) {
                    min = c[i][j];
                    u = a = i;
                    v = b = j;
                }
            }
        }

        while(parent[u] != 0) u = parent[u];
        while(parent[v] != 0) v = parent[v];

        if(u != v) {
            printf("\n%d -----> %d = %d", a, b, min);
            parent[v] = u;
            ne++;
            mincost += min;
        }

        c[a][b] = c[b][a] = 9999;
    }

    printf("\nMinimum Cost = %d\n", mincost);
}

TC 
#include<stdio.h>
#include<conio.h>
#include<time.h>

void kruskals();
int c[10][10], n;

void main() {
    int i, j;
    clock_t start, end;

    clrscr();
    printf("\nEnter number of vertices:\t");
    scanf("%d", &n);

    printf("\nEnter the cost matrix:\n");
    for(i = 1; i <= n; i++) {
        for(j = 1; j <= n; j++) {
            scanf("%d", &c[i][j]);
        }
    }

    start = clock();
    kruskals();
    end = clock();

    printf("\nTime taken: %f seconds\n", (end - start)/(double)CLK_TCK);
    getch();
}





10
#include<stdio.h>
#include<conio.h>

void subset(int, int, int);
int count = 0, d, s[10], x[10];

void main() {
    int sum = 0, n, i;
    clrscr();

    printf("\nEnter number of elements:\t");
    scanf("%d", &n);

    printf("\nEnter elements in ascending order:\n");
    for(i = 0; i < n; i++) {
        scanf("%d", &s[i]);
        sum += s[i];
    }

    printf("\nEnter required sum:\t");
    scanf("%d", &d);

    if(sum < d || s[0] > d) {
        printf("No solution exists\n");
    } else {
        subset(0, 0, sum);
    }

    getch();
}

void subset(int m, int k, int sum) {
    int i;
    x[k] = 1;

    if(m + s[k] == d) {
        printf("\nSubset solution %d:\n", ++count);
        for(i = 0; i <= k; i++) {
            if(x[i] == 1) printf("%d\t", s[i]);
        }
    } else if(m + s[k] + s[k+1] <= d) {
        subset(m + s[k], k + 1, sum - s[k]);
    }

    if((m + sum - s[k] >= d) && (m + s[k+1] <= d)) {
        x[k] = 0;
        subset(m, k + 1, sum - s[k]);
    }
}


TC 
#include<stdio.h>
#include<conio.h>
#include<time.h>

void subset(int, int, int);
int count = 0, d, s[10], x[10];

void main() {
    int sum = 0, n, i;
    clock_t start, end;
    clrscr();

    printf("\nEnter number of elements:\t");
    scanf("%d", &n);

    printf("\nEnter elements in ascending order:\n");
    for(i = 0; i < n; i++) {
        scanf("%d", &s[i]);
        sum += s[i];
    }

    printf("\nEnter required sum:\t");
    scanf("%d", &d);

    if(sum < d || s[0] > d) {
        printf("No solution exists\n");
    } else {
        start = clock();
        subset(0, 0, sum);
        end = clock();
        printf("\nTime taken: %f seconds\n", (end - start)/(double)CLK_TCK);
    }

    getch();
}
